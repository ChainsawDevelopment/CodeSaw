U import { takeEvery, call, take, actionChannel, put, select } from "redux-saga/effects";
R import { selectCurrentRevisions, SelectCurrentRevisions, loadedRevisionsRangeInfo, selectFileForView, loadedFileDiff, loadReviewInfo, loadedReviewInfo, publishReview, ReviewState, createGitLabLink, CreateGitLabLinkArgs } from './state';
U import { Action, ActionCreator } from "typescript-fsa";
U import { ReviewerApi, ReviewInfo, ReviewId, RevisionRange, PathPair, ReviewSnapshot, ReviewConcurrencyError } from '../../api/reviewer';
U import { RootState } from "../../rootState";
U import { delay } from "redux-saga";
U 
U const resolveProvisional = (range: RevisionRange, hash: string): RevisionRange => {
U     return {
U         current: range.current == 'provisional' ? hash : range.current,
U         previous: range.previous == 'provisional' ? hash : range.previous
U     }
U }
U 
U function* loadRevisionRangeDetailsSaga() {
U     const api = new ReviewerApi();
U 
U     for (; ;) {
U         const action: Action<SelectCurrentRevisions> = yield take(selectCurrentRevisions);
U 
U         const currentRange = yield select((state: RootState) => ({
U             reviewId: state.review.currentReview.reviewId,
U             range: state.review.range,
U             headCommit: state.review.currentReview.headCommit
U         }));
U 
U         const info = yield api.getRevisionRangeInfo(currentRange.reviewId, resolveProvisional(action.payload.range, currentRange.headCommit));
U 
U         yield put(loadedRevisionsRangeInfo(info));
U     }
U }
U 
U function* loadFileDiffSaga() {
U     const api = new ReviewerApi();
U 
U     for (; ;) {
U         const action: Action<{ path: PathPair }> = yield take(selectFileForView);
U         const currentRange = yield select((state: RootState) => ({
U             reviewId: state.review.currentReview.reviewId,
U             range: state.review.range,
U             headCommit: state.review.currentReview.headCommit
U         }));
U 
U         const diff = yield api.getDiff(currentRange.reviewId, resolveProvisional(currentRange.range, currentRange.headCommit), action.payload.path);
U 
U         yield put(loadedFileDiff(diff));
U     }
U }
U 
U function* loadReviewInfoSaga() {
U     const api = new ReviewerApi();
U 
U     for (; ;) {
U         const action: Action<{ reviewId: ReviewId }> = yield take(loadReviewInfo);
U         const info: ReviewInfo = yield api.getReviewInfo(action.payload.reviewId);
U 
U         const currentReview: ReviewId = yield select((s: RootState) => s.review.currentReview ? s.review.currentReview.reviewId : null);
U         const currentRange: RevisionRange = yield select((s: RootState) => s.review.range);
U 
U         yield put(loadedReviewInfo(info));
U 
U         let newRange: RevisionRange = {
U             previous: 'base',
U             current: info.hasProvisionalRevision ? 'provisional' : info.pastRevisions[info.pastRevisions.length - 1].number
U         }
U 
U         if (currentReview && action.payload.reviewId.projectId == currentReview.projectId && action.payload.reviewId.reviewId == currentReview.reviewId) {
U             if (currentRange != null) {
U                 newRange = currentRange;
U             }
U         }
U 
U         yield put(selectCurrentRevisions({
U             range: newRange
U         }))
U     }
U }
U 
R function* createGitLabLinkSaga() {
R     const api = new ReviewerApi();
R 
R     for (; ;) {
R         const action: Action<CreateGitLabLinkArgs> = yield take(createGitLabLink);
R 
R         yield api.createGitLabLink(action.payload.reviewId);
R     }
R }
R 
U function* publishReviewSaga() {
U     const api = new ReviewerApi();
U     for (; ;) {
U         const action: Action<{}> = yield take(publishReview);
U         const reviewSnapshot: ReviewSnapshot = yield select((s: RootState): ReviewSnapshot => ({
U             reviewId: s.review.currentReview.reviewId,
U             revision: s.review.rangeInfo.commits.current
U         }));
U 
U         for (let i = 0; i < 100; i++) {
U             try {
U                 yield api.publishReview(reviewSnapshot);
U                 break;
U             } catch(e) {
U                 if(!(e instanceof ReviewConcurrencyError)) {
U                     throw e;
U                 }
U             }
U             console.log('Review publish failed due to concurrency issue. Retrying attempt ', i);
U             yield delay(5000);
U         }
U 
U         yield put(loadReviewInfo({ reviewId: reviewSnapshot.reviewId }));
U     }
U }
U 
U export default [
U     loadRevisionRangeDetailsSaga,
U     loadFileDiffSaga,
U     loadReviewInfoSaga,
R     createGitLabLinkSaga,
R     publishReviewSaga,
U ];