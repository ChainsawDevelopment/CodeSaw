U import * as React from "react";
U 
U import { Dispatch } from "redux";
R import { selectCurrentRevisions, selectFileForView, loadReviewInfo, FileInfo, publishReview, createGitLabLink } from "./state";
U import { connect } from "react-redux";
U import { RootState } from "../../rootState";
U import { ChangedFile, RevisionRangeInfo, FileDiff, ReviewInfo, RevisionRange, ReviewId, RevisionId, Review, Hunk, PathPair, emptyPathPair } from "../../api/reviewer";
U 
U import Sidebar from 'semantic-ui-react/dist/commonjs/modules/Sidebar';
U import Segment from 'semantic-ui-react/dist/commonjs/elements/Segment';
U import Button from 'semantic-ui-react/dist/commonjs/elements/Button';
U import Message from 'semantic-ui-react/dist/commonjs/collections/Message';
U 
U import VersionSelector from './versionSelector';
U import ChangedFileTree from './changedFileTree';
U import DiffView from './diffView';
U 
U import "./review.less";
U import { OnMount } from "../../components/OnMount";
U 
U type SelectFileForViewHandler = (path: PathPair) => void;
U 
B const FileSummary = (props: { file: FileInfo }): JSX.Element => {
U     const items: JSX.Element[] = [];
U 
U     if (props.file.treeEntry.renamedFile) {
U         const { path } = props.file.treeEntry;
U 
U         items.push(
U             <div key="renamed" className="renamed">File renamed <pre>{path.oldPath}</pre> &rarr; <pre>{path.newPath}</pre></div>
U         );
U     }
U 
B     if (items.length == 0) {
U         return null;
U     }
U 
U     return (
U         <Message className="file-summary">
U             <Message.Content>
U                 {items}
U             </Message.Content>
U         </Message>
U     );
U };
U 
U const RangeInfo = (props: { info: RevisionRangeInfo, selectedFile: FileInfo, onSelectFileForView: SelectFileForViewHandler }): JSX.Element => {
U     return (
U         <div style={{ flex: 1 }}>
U             <Sidebar.Pushable as={Segment}>
U                 <Sidebar visible={true} width='thin'>
U                     <ChangedFileTree
U                         paths={props.info.changes.map(i => i.path)}
U                         selected={props.selectedFile ? props.selectedFile.path : emptyPathPair}
U                         onSelect={props.onSelectFileForView}
U                     />
U                 </Sidebar>
U                 <Sidebar.Pusher>
U                     <Segment basic>
U                         <Button onClick={() => props.onSelectFileForView(props.selectedFile.path)}>Refresh diff</Button>
U                         {props.selectedFile ? <FileSummary file={props.selectedFile} /> : null}
U                         {props.selectedFile && props.selectedFile.diff ? <DiffView hunks={props.selectedFile.diff.hunks} /> : null}
U                     </Segment>
U                 </Sidebar.Pusher>
U             </Sidebar.Pushable>
U         </div>
U     );
U }
U 
U interface OwnProps {
U     reviewId: ReviewId;
U }
U 
U interface DispatchProps {
U     loadReviewInfo(reviewId: ReviewId): void;
U     selectRevisionRange(range: RevisionRange): void;
U     selectFileForView: SelectFileForViewHandler;
R     createGitLabLink(reviewId: ReviewId);
U     publishReview(): void;
U }
U 
U interface StateProps {
U     currentReview: ReviewInfo;
U     currentRange: RevisionRange;
U     rangeInfo: RevisionRangeInfo;
U     selectedFile: FileInfo;
U }
U 
U type Props = OwnProps & StateProps & DispatchProps;
U 
U const reviewPage = (props: Props): JSX.Element => {
U     const provisional: RevisionId[] = props.currentReview.hasProvisionalRevision ? ['provisional'] : [];
U 
U     const publishReview = (
U         <div>
U             <Button onClick={props.publishReview} color='green'>Publish</Button>
U         </div>
U     );
U 
U     const pastRevisions = props.currentReview.pastRevisions.map(i => i.number);
U 
U     return (
U         <div id="review-page">
U             <OnMount onMount={() => props.loadReviewInfo(props.reviewId)} />
U 
U             <h1>Review {props.currentReview.title}</h1>
U 
U             <VersionSelector
U                 available={['base', ...pastRevisions, ...provisional]}
U                 hasProvisonal={props.currentReview.hasProvisionalRevision}
U                 range={props.currentRange}
U                 onSelectRange={props.selectRevisionRange}
U             />
R             <div>
R                 <Button onClick={() => props.createGitLabLink(props.reviewId)}>Create link in GitLab</Button>
R             </div>
U             {publishReview}
U             {props.rangeInfo ? (<RangeInfo
U                 info={props.rangeInfo}
U                 selectedFile={props.selectedFile}
U                 onSelectFileForView={props.selectFileForView}
U             />) : null}
U         </div>
U     );
U };
U 
U const mapStateToProps = (state: RootState): StateProps => ({
U     currentReview: state.review.currentReview,
U     currentRange: state.review.range,
U     rangeInfo: state.review.rangeInfo,
U     selectedFile: state.review.selectedFile,
U });
U 
U const mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({
U     loadReviewInfo: (reviewId: ReviewId) => dispatch(loadReviewInfo({ reviewId })),
U     selectRevisionRange: range => dispatch(selectCurrentRevisions({ range })),
U     selectFileForView: (path) => dispatch(selectFileForView({ path })),
R     createGitLabLink: (reviewId) => dispatch(createGitLabLink({ reviewId })),
U     publishReview: () => dispatch(publishReview({}))
U });
U 
U export default connect(
U     mapStateToProps,
U     mapDispatchToProps
U )(reviewPage);